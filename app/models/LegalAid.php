<?phpclass LegalAid extends Eloquent{    /*            name , date , call_type , gender , contact , address , priority_group_id , minority_group_id ,            case_nature , action_taken , refer , call_taken_by , call_taken_by , center_id        */    protected $table='legalaids';    protected $fillable = array(        "name",        "date",        "gender",        "age",        "contact",        "occupation",        "first_follow_visit",        "address",        "marital_status",        "visit_type",        "relation_with_client",        "visit_reason",        "priority_group_id",        "minority_group_id",        "psychosocial_support",        "case_nature_id",        "action_taken",        "referred_to",        "callback",        "heard_from",        "ratings",        "center_id");    public function center(){        return $this->belongsTo('Center');    }    public function minority_group(){        return $this->belongsTo('MinorityGroup');    }    public function priority_group(){        return $this->belongsTo('PriorityGroup');    }    public function case_nature(){        return $this->belongsTo('CaseNature');        /*$arrayname= array();        $records= \DB::table('case_natures')->whereIn('id',[473, 23, 472, 269, 13, 451, 271, 151, 9, 135, 264, 161, 23, 448, 127, 175, 403, 181, 135, 387, 472, 175, 312, 470, 457, 183, 9, 501, 462, 446, 502, 474])->get();        foreach ($records as $record)        {            $arrayname[$record->id] = $record->name;        }        return $arrayname;*/    }    protected function getLabels(){        $labels= array(            "Name of Visitor",            "Date",            "Gender",            "Age",            "Contact Number",            "Occupation",            "First time or Follow-up Visit",            "Address",            "Marital Status",            "Visit (personal or third or neutral party)",            "Relationship with Beneficiary if other than Client",            "Reason for Visit",            "Priority Group",            "Minority Group",            "Psychosocial Support Provided (Yes or No)",            "Nature of Advice",            "Action Taken",            "Case Referred to other service providers (Name)",            "Do you want us to call you back?",            "From where you have heard about this Center",            "How you rate our legal aid services",            'Center');        return mapArrays($this->fillable,$labels);    }    protected function getFillables(){	return $this->fillable;	}    protected function getStartDate(){        return $this->where('date','>',0)->orderBy('date', 'asc')->first();    }    protected function getAllRecords(){        $records=$this->all();        if(Auth::check() && Entrust::hasRole('Center_User')){            $center=Confide::user()->center()->first();            $records=$this->where('center_id','=',$center['id'])->get();        }        $new_records=array();        foreach ($records as $record) {            $arr=array();            $object=$record->original;            foreach ($object as $key => $value) {                if(in_array($key, $this->fillable)|| $key=='id'){                    if(strpos($key, '_id')>0)                    {                        if (is_numeric($value))                        {                            $func=str_replace("_id", "", $key);                            $tmp=$record->$func()->get()->toArray();                            $arr[$key]=count($tmp)>0?$tmp[0]['name']:'';                        }                        else{                            $arr[$key]=$value;                        }                    }                    else{                        $arr[$key]=$value;                    }                }            }            array_push($new_records, $arr);        }        return $new_records;    }    protected function getLimitRecords($limit){        $records=$this->limit($limit)->get();        if(Auth::check() && Entrust::hasRole('Center_User')){            $center=Confide::user()->center()->first();            $records=$this->where('center_id','=',$center['id'])->get();        }        $new_records=array();        foreach ($records as $record) {            $arr=array();            $object=$record->original;            foreach ($object as $key => $value) {                if(in_array($key, $this->fillable)|| $key=='id'){                    if(strpos($key, '_id')>0)                    {                        if (is_numeric($value))                        {                            $func=str_replace("_id", "", $key);                            $tmp=$record->$func()->get()->toArray();                            $arr[$key]=count($tmp)>0?$tmp[0]['name']:'';                        }                        else{                            $arr[$key]=$value;                        }                    }                    else{                        $arr[$key]=$value;                    }                }            }            array_push($new_records, $arr);        }        return $new_records;    }    protected function getCenterRecords($city){        $center = \DB::table('centers')->where('name', 'like', "%$city%")->first();        //dd($center);        $records=$this->where('center_id','=',$center->id)->limit(60)->get();        $new_records=array();        foreach ($records as $record) {            $arr=array();            $object=$record->original;            foreach ($object as $key => $value) {                if(in_array($key, $this->fillable)|| $key=='id'){                    if(strpos($key, '_id')>0)                    {                        if (is_numeric($value))                        {                            $func=str_replace("_id", "", $key);                            $tmp=$record->$func()->get()->toArray();                            $arr[$key]=count($tmp)>0?$tmp[0]['name']:'';                        }                        else{                            $arr[$key]=$value;                        }                    }                    else{                        $arr[$key]=$value;                    }                }            }            array_push($new_records, $arr);        }        return $new_records;    }    protected function getAllRecordsByIds($ids,$fields=[]){        $records=$this->all();        if(count($fields)>0){            array_unshift($fields, 'id');            $records=$this->all($fields);        }        if(Auth::check() && Entrust::hasRole('Center_User')){            $center=Confide::user()->center()->first();            $records=$this->where('center_id','=',$center['id']);            if(count($fields)>0){                array_unshift($fields, 'id');                $records=$this->select($fields)->where('center_id','=',$center['id'])->get();            }        }        $new_records=array();        foreach ($records as $record) {            $arr=array();            $object=$record->original;            if(in_array($object['id'], $ids)){                foreach ($object as $key => $value) {                    if(in_array($key, $this->fillable)|| $key=='id'){                        if(strpos($key, '_id')>0)                        {                            if (is_numeric($value))                            {                                $func=str_replace("_id", "", $key);                                $tmp=$record->$func()->get()->toArray();                                $arr[$key]=count($tmp)>0?$tmp[0]['name']:'';                            }                            else{                                $arr[$key]=$value;                            }                        }                        else{                            $arr[$key]=$value;                        }                    }                }                array_push($new_records, $arr);            }        }        return $new_records;    }}?>