<?phpclass CourtCase extends Eloquent{	 		protected $table='cases';	protected $fillable = array("name",//"contact","gender",//"age","cnin","occupation","marital_status","address","tehsil","guardian","relation_with_guardian","contact_guardian","priority_group_id",//"minority_group_id",//"psychosocial_support",//"case_type",//"case_nature_id",//"action_taken","court_name","lawyer_name",//"lawyer_cell_no","cost",//"date",//"case_number",//"referred_from",//"stage_proceeding",//"decision",//'decision_date','decision_result',"center_id");	public function center(){		return $this->belongsTo('Center');	}		public function minority_group(){		return $this->belongsTo('MinorityGroup');	}	public function priority_group(){		return $this->belongsTo('PriorityGroup');	}	public function case_nature(){		return $this->belongsTo('CaseNature');	}	protected function getLabels(){		$labels= array("Name&nbsp;Of&nbsp;Party","Contact Number","Gender","Age","CNIC #","Occupation","Marital Status","Address","Tehsil","Name of Guardian","Relation with Guardian","Guardian Contact Number","Priority Group ","Minority Group","Psychosocial Support Provided","Type of Case","Nature Of Problem","Action Taken","Court Name","Contact Lawyer Name","Contact Lawyer Cell No.","Cost in Pak Rs.","Date of Case Registration","Case Number","Case Referred From","Stage Proceeding","Decision (if case concluded)","Case Concluding Month","Decision Result",'Center');	return mapArrays($this->fillable,$labels);	}	protected function getFillables(){	return $this->fillable;	}	protected function getStartDate(){		return $this->where('date','>',0)->orderBy('date', 'asc')->first();	}    protected function getAllRecords(){        $records=$this->all();        if(Auth::check() && Entrust::hasRole('Center_User')){            $center=Confide::user()->center()->first();            $records=$this->where('center_id','=',$center['id'])->get();        }        $new_records=array();        foreach ($records as $record) {            $arr=array();            $object=$record->original;            foreach ($object as $key => $value) {                if(in_array($key, $this->fillable)|| $key=='id'){                    if(strpos($key, '_id')>0)                    {                        $func=str_replace("_id", "", $key);                        $tmp=$record->$func()->get()->toArray();                        $arr[$key]=count($tmp)>0?$tmp[0]['name']:'';                    }                    else{                        $arr[$key]=$value;                    }                }            }            array_push($new_records, $arr);        }        return $new_records;    }    protected function getLimitRecords($limit){        $records=$this->limit($limit)->get();        if(Auth::check() && Entrust::hasRole('Center_User')){            $center=Confide::user()->center()->first();            $records=$this->where('center_id','=',$center['id'])->get();        }        $new_records=array();        foreach ($records as $record) {            $arr=array();            $object=$record->original;            foreach ($object as $key => $value) {                if(in_array($key, $this->fillable)|| $key=='id'){                    if(strpos($key, '_id')>0)                    {                        $func=str_replace("_id", "", $key);                        $tmp=$record->$func()->get()->toArray();                        $arr[$key]=count($tmp)>0?$tmp[0]['name']:'';                    }                    else{                        $arr[$key]=$value;                    }                }            }            array_push($new_records, $arr);        }        return $new_records;    }    protected function getCenterRecords($city)    {        $center = \DB::table('centers')->where('name', 'like', "%$city%")->first();        //dd($center);        $records = $this->where('center_id', '=', $center->id)->limit(60)->get();        $new_records=array();        foreach ($records as $record) {            $arr=array();            $object=$record->original;            foreach ($object as $key => $value) {                if(in_array($key, $this->fillable)|| $key=='id'){                    if(strpos($key, '_id')>0)                    {                        $func=str_replace("_id", "", $key);                        $tmp=$record->$func()->get()->toArray();                        $arr[$key]=count($tmp)>0?$tmp[0]['name']:'';                    }                    else{                        $arr[$key]=$value;                    }                }            }            array_push($new_records, $arr);        }        return $new_records;    }	protected function getAllRecordsByIds($ids,$fields=[]){		$records=$this->all();		if(count($fields)>0){			array_unshift($fields, 'id');			$records=$this->all($fields);					}		if(Auth::check() && Entrust::hasRole('Center_User')){			$center=Confide::user()->center()->first();			$records=$this->where('center_id','=',$center['id']);			if(count($fields)>0){				array_unshift($fields, 'id');				$records=$this->all($fields);							$records=$this->select($fields)->where('center_id','=',$center['id'])->get();			}		}		$new_records=array();				foreach ($records as $record) {						$arr=array();			$object=$record->original;			if(in_array($object['id'], $ids)){				foreach ($object as $key => $value) {				  					if(in_array($key, $this->fillable)|| $key=='id'){												if(strpos($key, '_id')>0)						{							$func=str_replace("_id", "", $key);							$tmp=$record->$func()->get()->toArray(); 							$arr[$key]=count($tmp)>0?$tmp[0]['name']:'';							}						else{							$arr[$key]=$value;						}					}				}								array_push($new_records, $arr);			}		}		return $new_records;	}}?>