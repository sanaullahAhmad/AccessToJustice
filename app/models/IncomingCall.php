<?phpclass IncomingCall extends Eloquent{		/*			name , date , call_type , gender , contact , address , priority_group_id , minority_group_id ,			case_nature , action_taken , refer , call_taken_by , call_taken_by , center_id 		*/	 protected $table='incoming_calls';	protected $fillable = array(	'name', 	'date', 	'time', 	'gender', 	'age', 	'contact', 	'cnic', 	'occupation', 	'call_type', 	'address', 	'marital_status', 	'call_nature_id', 	'relation', 	'call_purpose_id', 	'priority_group_id', 	'minority_group_id', 	'psychosocial_support', 	'case_nature_id', 	'action_taken', 	'refer', 	'callback_option', 	'refer_from', 	'crank_call', 	'rating_string', 	'helpline_mobile', 	'call_taken_by', 	'center_id');	public function center(){		return $this->belongsTo('Center');	}		public function minority_group(){		return $this->belongsTo('MinorityGroup');	}	public function priority_group(){		return $this->belongsTo('PriorityGroup');	}	public function case_nature(){		return $this->belongsTo('CaseNature');	}	public function call_nature(){		return $this->belongsTo('CallNature');	}	public function call_purpose(){		return $this->belongsTo('CallPurpose');	}	protected function getStartDate(){		return $this->where('date','>',0)->orderBy('date', 'asc')->first();	}	protected function getLabels(){		$labels= array(		'Name of Caller', 		'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Date&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;',		'Time', 		'Gender', 		'Age', 		'Contact Number', 		'CNIC', 		'Occupation', 		'First time or Follow-up Call', 		'Address', 		'Marital Status', 		'Caller (personal or third or neutral party) ', 		'Relationship with Beneficiary if other than Client', 		'Purpose of Call ', 		'Priority Group ', 		'Minority Group', 		'Psychosocial Support Provided', 		'Nature of Case',		'Action Taken', 		'Case Referred to other service providers', 		'Do you want us to call you back?', 		'From where you have heard about this Center', 		'If crank/blank call & threatening call please specify', 		'How you rate our legal aid services', 		'Helpline Call or Mobile Call', 		'Call taken by (Name of LAC Representative)', 		'Center');	return mapArrays($this->fillable,$labels);	}	protected function getFillables(){	return $this->fillable;	}    protected function getAllRecords(){        $records=$this->all();        if(Auth::check() && Entrust::hasRole('Center_User')){            $center=Confide::user()->center()->first();            $records=$this->where('center_id','=',$center['id'])->get();        }        $new_records=array();        foreach ($records as $record) {            $arr=array();            $object=$record->original;            foreach ($object as $key => $value) {                if(in_array($key, $this->fillable)|| $key=='id'){                    if(strpos($key, '_id')>0)                    {                        $func=str_replace("_id", "", $key);                        $tmp=$record->$func()->get()->toArray();                        $arr[$key]=count($tmp)>0?$tmp[0]['name']:'';                    }                    else{                        $arr[$key]=$value;                    }                }            }            array_push($new_records, $arr);        }        return $new_records;    }    protected function getLimitRecords($limit){        $records=$this->limit($limit)->get();        if(Auth::check() && Entrust::hasRole('Center_User')){            $center=Confide::user()->center()->first();            $records=$this->where('center_id','=',$center['id'])->get();        }        $new_records=array();        foreach ($records as $record) {            $arr=array();            $object=$record->original;            foreach ($object as $key => $value) {                if(in_array($key, $this->fillable)|| $key=='id'){                    if(strpos($key, '_id')>0)                    {                        $func=str_replace("_id", "", $key);                        $tmp=$record->$func()->get()->toArray();                        $arr[$key]=count($tmp)>0?$tmp[0]['name']:'';                    }                    else{                        $arr[$key]=$value;                    }                }            }            array_push($new_records, $arr);        }        return $new_records;    }    protected function getCenterRecords($city){        $center = \DB::table('centers')->where('name', 'like', "%$city%")->first();        $records=$this->where('center_id','=',$center->id)->limit(60)->get();        $new_records=array();        foreach ($records as $record) {            $arr=array();            $object=$record->original;            foreach ($object as $key => $value) {                if(in_array($key, $this->fillable)|| $key=='id'){                    if(strpos($key, '_id')>0)                    {                        $func=str_replace("_id", "", $key);                        $tmp=$record->$func()->get()->toArray();                        $arr[$key]=count($tmp)>0?$tmp[0]['name']:'';                    }                    else{                        $arr[$key]=$value;                    }                }            }            array_push($new_records, $arr);        }        return $new_records;    }	protected function getAllRecordsByIds($ids,$fields=[]){		$records=$this->all();		if(count($fields)>0){			array_unshift($fields, 'id');			$records=$this->all($fields);					}		if(Auth::check() && Entrust::hasRole('Center_User')){			$center=Confide::user()->center()->first();			$records=$this->where('center_id','=',$center['id']);			if(count($fields)>0){				array_unshift($fields, 'id');						$records=$this->select($fields)->where('center_id','=',$center['id'])->get();			}		}		$new_records=array();				foreach ($records as $record) {						$arr=array();			$object=$record->original;			if(in_array($object['id'], $ids)){				foreach ($object as $key => $value) {				  					if(in_array($key, $this->fillable)|| $key=='id'){												if(strpos($key, '_id')>0)						{							$func=str_replace("_id", "", $key);							$tmp=$record->$func()->get()->toArray(); 							$arr[$key]=count($tmp)>0?$tmp[0]['name']:'';							}						else{							$arr[$key]=$value;						}					}				}								array_push($new_records, $arr);			}		}		return $new_records;	}}?>